/* tslint:disable */
/* eslint-disable */
/**
 * Fishjam Media Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddPeerRequest
 */
export interface AddPeerRequest {
    /**
     * 
     * @type {PeerOptions}
     * @memberof AddPeerRequest
     */
    'options': PeerOptions;
    /**
     * 
     * @type {PeerType}
     * @memberof AddPeerRequest
     */
    'type': PeerType;
}


/**
 * Response containing verification information
 * @export
 * @interface BroadcasterVerifyTokenResponse
 */
export interface BroadcasterVerifyTokenResponse {
    /**
     * 
     * @type {BroadcasterVerifyTokenResponseData}
     * @memberof BroadcasterVerifyTokenResponse
     */
    'data': BroadcasterVerifyTokenResponseData;
}
/**
 * 
 * @export
 * @interface BroadcasterVerifyTokenResponseData
 */
export interface BroadcasterVerifyTokenResponseData {
    /**
     * 
     * @type {boolean}
     * @memberof BroadcasterVerifyTokenResponseData
     */
    'authenticated': boolean;
    /**
     * 
     * @type {string}
     * @memberof BroadcasterVerifyTokenResponseData
     */
    'streamId'?: string;
}
/**
 * Error message
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error details
     * @type {string}
     * @memberof ModelError
     */
    'errors': string;
}
/**
 * Describes peer status
 * @export
 * @interface Peer
 */
export interface Peer {
    /**
     * Assigned peer id
     * @type {string}
     * @memberof Peer
     */
    'id': string;
    /**
     * Custom metadata set by the peer
     * @type {any}
     * @memberof Peer
     */
    'metadata': any | null;
    /**
     * 
     * @type {PeerStatus}
     * @memberof Peer
     */
    'status': PeerStatus;
    /**
     * List of all peer\'s tracks
     * @type {Array<Track>}
     * @memberof Peer
     */
    'tracks': Array<Track>;
    /**
     * 
     * @type {PeerType}
     * @memberof Peer
     */
    'type': PeerType;
}


/**
 * Response containing peer details and their token
 * @export
 * @interface PeerDetailsResponse
 */
export interface PeerDetailsResponse {
    /**
     * 
     * @type {PeerDetailsResponseData}
     * @memberof PeerDetailsResponse
     */
    'data': PeerDetailsResponseData;
}
/**
 * 
 * @export
 * @interface PeerDetailsResponseData
 */
export interface PeerDetailsResponseData {
    /**
     * 
     * @type {Peer}
     * @memberof PeerDetailsResponseData
     */
    'peer': Peer;
    /**
     * Websocket URL to which peer has to connect
     * @type {string}
     * @memberof PeerDetailsResponseData
     */
    'peer_websocket_url'?: string;
    /**
     * Token for authorizing websocket connection
     * @type {string}
     * @memberof PeerDetailsResponseData
     */
    'token': string;
}
/**
 * @type PeerOptions
 * Peer-specific options
 * @export
 */
export type PeerOptions = PeerOptionsWebRTC;

/**
 * Options specific to the WebRTC peer
 * @export
 * @interface PeerOptionsWebRTC
 */
export interface PeerOptionsWebRTC {
    /**
     * Enables the peer to use simulcast
     * @type {boolean}
     * @memberof PeerOptionsWebRTC
     */
    'enableSimulcast'?: boolean;
    /**
     * Custom peer metadata
     * @type {{ [key: string]: any; }}
     * @memberof PeerOptionsWebRTC
     */
    'metadata'?: { [key: string]: any; };
    /**
     * 
     * @type {PeerOptionsWebRTCSubscribe}
     * @memberof PeerOptionsWebRTC
     */
    'subscribe'?: PeerOptionsWebRTCSubscribe | null;
}
/**
 * Configure server-side subscriptions to the peer\'s tracks
 * @export
 * @interface PeerOptionsWebRTCSubscribe
 */
export interface PeerOptionsWebRTCSubscribe {
    /**
     * The format to use for the output audio
     * @type {string}
     * @memberof PeerOptionsWebRTCSubscribe
     */
    'audioFormat'?: PeerOptionsWebRTCSubscribeAudioFormatEnum;
    /**
     * The sample rate to use for the output audio
     * @type {number}
     * @memberof PeerOptionsWebRTCSubscribe
     */
    'audioSampleRate'?: PeerOptionsWebRTCSubscribeAudioSampleRateEnum;
}

export const PeerOptionsWebRTCSubscribeAudioFormatEnum = {
    Pcm16: 'pcm16'
} as const;

export type PeerOptionsWebRTCSubscribeAudioFormatEnum = typeof PeerOptionsWebRTCSubscribeAudioFormatEnum[keyof typeof PeerOptionsWebRTCSubscribeAudioFormatEnum];
export const PeerOptionsWebRTCSubscribeAudioSampleRateEnum = {
    NUMBER_16000: 16000,
    NUMBER_24000: 24000
} as const;

export type PeerOptionsWebRTCSubscribeAudioSampleRateEnum = typeof PeerOptionsWebRTCSubscribeAudioSampleRateEnum[keyof typeof PeerOptionsWebRTCSubscribeAudioSampleRateEnum];

/**
 * Response containing new peer token
 * @export
 * @interface PeerRefreshTokenResponse
 */
export interface PeerRefreshTokenResponse {
    /**
     * 
     * @type {PeerRefreshTokenResponseData}
     * @memberof PeerRefreshTokenResponse
     */
    'data': PeerRefreshTokenResponseData;
}
/**
 * 
 * @export
 * @interface PeerRefreshTokenResponseData
 */
export interface PeerRefreshTokenResponseData {
    /**
     * Token for authorizing websocket connection
     * @type {string}
     * @memberof PeerRefreshTokenResponseData
     */
    'token': string;
}
/**
 * Informs about the peer status
 * @export
 * @enum {string}
 */

export const PeerStatus = {
    Connected: 'connected',
    Disconnected: 'disconnected'
} as const;

export type PeerStatus = typeof PeerStatus[keyof typeof PeerStatus];


/**
 * Peer type
 * @export
 * @enum {string}
 */

export const PeerType = {
    Webrtc: 'webrtc'
} as const;

export type PeerType = typeof PeerType[keyof typeof PeerType];


/**
 * Description of the room state
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {RoomConfig}
     * @memberof Room
     */
    'config': RoomConfig;
    /**
     * Room ID
     * @type {string}
     * @memberof Room
     */
    'id': string;
    /**
     * List of all peers
     * @type {Array<Peer>}
     * @memberof Room
     */
    'peers': Array<Peer>;
}
/**
 * Room configuration
 * @export
 * @interface RoomConfig
 */
export interface RoomConfig {
    /**
     * Maximum amount of peers allowed into the room
     * @type {number}
     * @memberof RoomConfig
     */
    'maxPeers'?: number | null;
    /**
     * True if livestream viewers can omit specifying a token.
     * @type {boolean}
     * @memberof RoomConfig
     */
    'public'?: boolean;
    /**
     * The use-case of the room. If not provided, this defaults to conference.
     * @type {string}
     * @memberof RoomConfig
     */
    'roomType'?: RoomConfigRoomTypeEnum;
    /**
     * Enforces video codec for each peer in the room
     * @type {string}
     * @memberof RoomConfig
     */
    'videoCodec'?: RoomConfigVideoCodecEnum | null;
    /**
     * URL where Fishjam notifications will be sent
     * @type {string}
     * @memberof RoomConfig
     */
    'webhookUrl'?: string | null;
}

export const RoomConfigRoomTypeEnum = {
    FullFeature: 'full_feature',
    AudioOnly: 'audio_only',
    Broadcaster: 'broadcaster',
    Livestream: 'livestream',
    Conference: 'conference'
} as const;

export type RoomConfigRoomTypeEnum = typeof RoomConfigRoomTypeEnum[keyof typeof RoomConfigRoomTypeEnum];
export const RoomConfigVideoCodecEnum = {
    H264: 'h264',
    Vp8: 'vp8'
} as const;

export type RoomConfigVideoCodecEnum = typeof RoomConfigVideoCodecEnum[keyof typeof RoomConfigVideoCodecEnum];

/**
 * Response containing room details
 * @export
 * @interface RoomCreateDetailsResponse
 */
export interface RoomCreateDetailsResponse {
    /**
     * 
     * @type {RoomCreateDetailsResponseData}
     * @memberof RoomCreateDetailsResponse
     */
    'data': RoomCreateDetailsResponseData;
}
/**
 * 
 * @export
 * @interface RoomCreateDetailsResponseData
 */
export interface RoomCreateDetailsResponseData {
    /**
     * Fishjam instance address where the room was created. This might be different than the address of Fishjam where the request was sent only when running a cluster of Fishjams.
     * @type {string}
     * @memberof RoomCreateDetailsResponseData
     */
    'fishjam_address': string;
    /**
     * 
     * @type {Room}
     * @memberof RoomCreateDetailsResponseData
     */
    'room': Room;
}
/**
 * Response containing room details
 * @export
 * @interface RoomDetailsResponse
 */
export interface RoomDetailsResponse {
    /**
     * 
     * @type {Room}
     * @memberof RoomDetailsResponse
     */
    'data': Room;
}
/**
 * Response containing list of all rooms
 * @export
 * @interface RoomsListingResponse
 */
export interface RoomsListingResponse {
    /**
     * 
     * @type {Array<Room>}
     * @memberof RoomsListingResponse
     */
    'data': Array<Room>;
}
/**
 * Token for authorizing broadcaster streamer connection
 * @export
 * @interface StreamerToken
 */
export interface StreamerToken {
    /**
     * 
     * @type {string}
     * @memberof StreamerToken
     */
    'token': string;
}
/**
 * Describes media track of a Peer or Component
 * @export
 * @interface Track
 */
export interface Track {
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    'id'?: string;
    /**
     * 
     * @type {any}
     * @memberof Track
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    'type'?: TrackTypeEnum;
}

export const TrackTypeEnum = {
    Audio: 'audio',
    Video: 'video'
} as const;

export type TrackTypeEnum = typeof TrackTypeEnum[keyof typeof TrackTypeEnum];

/**
 * Token for authorizing broadcaster viewer connection
 * @export
 * @interface ViewerToken
 */
export interface ViewerToken {
    /**
     * 
     * @type {string}
     * @memberof ViewerToken
     */
    'token': string;
}

/**
 * BroadcasterApi - axios parameter creator
 * @export
 */
export const BroadcasterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Verify token provided by broadcaster
         * @param {string} token Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('verifyToken', 'token', token)
            const localVarPath = `/broadcaster/verify/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcasterApi - functional programming interface
 * @export
 */
export const BroadcasterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BroadcasterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Verify token provided by broadcaster
         * @param {string} token Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BroadcasterVerifyTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyToken(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BroadcasterApi.verifyToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BroadcasterApi - factory interface
 * @export
 */
export const BroadcasterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BroadcasterApiFp(configuration)
    return {
        /**
         * 
         * @summary Verify token provided by broadcaster
         * @param {string} token Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken(token: string, options?: any): AxiosPromise<BroadcasterVerifyTokenResponse> {
            return localVarFp.verifyToken(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BroadcasterApi - object-oriented interface
 * @export
 * @class BroadcasterApi
 * @extends {BaseAPI}
 */
export class BroadcasterApi extends BaseAPI {
    /**
     * 
     * @summary Verify token provided by broadcaster
     * @param {string} token Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcasterApi
     */
    public verifyToken(token: string, options?: RawAxiosRequestConfig) {
        return BroadcasterApiFp(this.configuration).verifyToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Handle notification from broadcaster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notification: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Handle notification from broadcaster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notification(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notification(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.notification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Handle notification from broadcaster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notification(options?: any): AxiosPromise<void> {
            return localVarFp.notification(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Handle notification from broadcaster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public notification(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).notification(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer: async (roomId: string, addPeerRequest?: AddPeerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('addPeer', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/peer`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPeerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom: async (roomConfig?: RoomConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer: async (roomId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deletePeer', 'roomId', roomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePeer', 'id', id)
            const localVarPath = `/room/{room_id}/peer/{id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteRoom', 'roomId', roomId)
            const localVarPath = `/room/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRooms: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getRoom', 'roomId', roomId)
            const localVarPath = `/room/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh peer token
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (roomId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('refreshToken', 'roomId', roomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refreshToken', 'id', id)
            const localVarPath = `/room/{room_id}/peer/{id}/refresh_token`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPeer(roomId, addPeerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.addPeer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoom(roomConfig?: RoomConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomCreateDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(roomConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.createRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePeer(roomId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePeer(roomId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.deletePeer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoom(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.deleteRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRooms(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomsListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRooms(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.getAllRooms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoom(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoom(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.getRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh peer token
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(roomId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerRefreshTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(roomId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: any): AxiosPromise<PeerDetailsResponse> {
            return localVarFp.addPeer(roomId, addPeerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom(roomConfig?: RoomConfig, options?: any): AxiosPromise<RoomCreateDetailsResponse> {
            return localVarFp.createRoom(roomConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer(roomId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePeer(roomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRooms(options?: any): AxiosPromise<RoomsListingResponse> {
            return localVarFp.getAllRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom(roomId: string, options?: any): AxiosPromise<RoomDetailsResponse> {
            return localVarFp.getRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh peer token
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(roomId: string, id: string, options?: any): AxiosPromise<PeerRefreshTokenResponse> {
            return localVarFp.refreshToken(roomId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * 
     * @summary Create peer
     * @param {string} roomId Room id
     * @param {AddPeerRequest} [addPeerRequest] Peer specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).addPeer(roomId, addPeerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a room
     * @param {RoomConfig} [roomConfig] Room configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public createRoom(roomConfig?: RoomConfig, options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).createRoom(roomConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete peer
     * @param {string} roomId Room ID
     * @param {string} id Peer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deletePeer(roomId: string, id: string, options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).deletePeer(roomId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the room
     * @param {string} roomId Room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deleteRoom(roomId: string, options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).deleteRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show information about all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public getAllRooms(options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).getAllRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Shows information about the room
     * @param {string} roomId Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public getRoom(roomId: string, options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).getRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh peer token
     * @param {string} roomId Room ID
     * @param {string} id Peer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public refreshToken(roomId: string, id: string, options?: RawAxiosRequestConfig) {
        return RoomApiFp(this.configuration).refreshToken(roomId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StreamerApi - axios parameter creator
 * @export
 */
export const StreamerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate a token that can be used by a streamer to start streaming
         * @param {string} roomId ID of the stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateStreamerToken: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('generateStreamerToken', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/streamer`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamerApi - functional programming interface
 * @export
 */
export const StreamerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreamerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generate a token that can be used by a streamer to start streaming
         * @param {string} roomId ID of the stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateStreamerToken(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateStreamerToken(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamerApi.generateStreamerToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreamerApi - factory interface
 * @export
 */
export const StreamerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreamerApiFp(configuration)
    return {
        /**
         * 
         * @summary Generate a token that can be used by a streamer to start streaming
         * @param {string} roomId ID of the stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateStreamerToken(roomId: string, options?: any): AxiosPromise<StreamerToken> {
            return localVarFp.generateStreamerToken(roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamerApi - object-oriented interface
 * @export
 * @class StreamerApi
 * @extends {BaseAPI}
 */
export class StreamerApi extends BaseAPI {
    /**
     * 
     * @summary Generate a token that can be used by a streamer to start streaming
     * @param {string} roomId ID of the stream.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public generateStreamerToken(roomId: string, options?: RawAxiosRequestConfig) {
        return StreamerApiFp(this.configuration).generateStreamerToken(roomId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ViewerApi - axios parameter creator
 * @export
 */
export const ViewerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates token that a viewer can use to watch a livestream
         * @param {string} roomId ID of the stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateViewerToken: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('generateViewerToken', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/viewer`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewerApi - functional programming interface
 * @export
 */
export const ViewerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates token that a viewer can use to watch a livestream
         * @param {string} roomId ID of the stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateViewerToken(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateViewerToken(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ViewerApi.generateViewerToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ViewerApi - factory interface
 * @export
 */
export const ViewerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewerApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates token that a viewer can use to watch a livestream
         * @param {string} roomId ID of the stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateViewerToken(roomId: string, options?: any): AxiosPromise<ViewerToken> {
            return localVarFp.generateViewerToken(roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export class ViewerApi extends BaseAPI {
    /**
     * 
     * @summary Generates token that a viewer can use to watch a livestream
     * @param {string} roomId ID of the stream.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    public generateViewerToken(roomId: string, options?: RawAxiosRequestConfig) {
        return ViewerApiFp(this.configuration).generateViewerToken(roomId, options).then((request) => request(this.axios, this.basePath));
    }
}



